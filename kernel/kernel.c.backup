/* SAGE OS Kernel - Standalone Version */

#if defined(__x86_64__) || defined(__i386__)
// I/O port functions for x86
static inline void outb(unsigned short port, unsigned char value) {
    __asm__ volatile ("outb %0, %1" : : "a"(value), "Nd"(port));
}

static inline unsigned char inb(unsigned short port) {
    unsigned char ret;
    __asm__ volatile ("inb %1, %0" : "=a"(ret) : "Nd"(port));
    return ret;
}

// Serial port functions for x86
void serial_init() {
    outb(0x3F8 + 1, 0x00);    // Disable interrupts
    outb(0x3F8 + 3, 0x80);    // Enable DLAB
    outb(0x3F8 + 0, 0x03);    // Set divisor to 3 (38400 baud)
    outb(0x3F8 + 1, 0x00);    // High byte
    outb(0x3F8 + 3, 0x03);    // 8 bits, no parity, one stop bit
    outb(0x3F8 + 2, 0xC7);    // Enable FIFO
    outb(0x3F8 + 4, 0x0B);    // IRQs enabled, RTS/DSR set
}

void serial_putc(char c) {
    while ((inb(0x3F8 + 5) & 0x20) == 0);
    outb(0x3F8, c);
}

void serial_puts(const char* str) {
    while (*str) {
        serial_putc(*str++);
    }
}

#else
// ARM/RISC-V UART functions (placeholder for now)
void serial_init() {
    // ARM/RISC-V serial initialization would go here
}

void serial_putc(char c) {
    // ARM/RISC-V serial output would go here
    // For now, just do nothing
    (void)c;
}

void serial_puts(const char* str) {
    // ARM/RISC-V serial output would go here
    // For now, just do nothing
    (void)str;
}
#endif

// Simple delay function
void delay(int ms) {
    volatile int i, j;
    for (i = 0; i < ms; i++) {
        for (j = 0; j < 1000; j++) {
            // Simple busy wait
        }
    }
}

// QEMU exit function
void qemu_exit(int exit_code) {
#if defined(__x86_64__) || defined(__i386__)
    // QEMU ISA debug exit
    outb(0xf4, exit_code);
#endif
}

// Display ASCII art welcome message
void display_welcome_message() {
    serial_puts("  ███████╗ █████╗  ██████╗ ███████╗      ██████╗ ███████╗\n");
    serial_puts("  ██╔════╝██╔══██╗██╔════╝ ██╔════╝     ██╔═══██╗██╔════╝\n");
    serial_puts("  ███████╗███████║██║  ███╗█████╗       ██║   ██║███████╗\n");
    serial_puts("  ╚════██║██╔══██║██║   ██║██╔══╝       ██║   ██║╚════██║\n");
    serial_puts("  ███████║██║  ██║╚██████╔╝███████╗     ╚██████╔╝███████║\n");
    serial_puts("  ╚══════╝╚═╝  ╚═╝ ╚═════╝ ╚══════╝      ╚═════╝ ╚══════╝\n");
    serial_puts("\n");
    serial_puts("        Self-Aware General Environment Operating System\n");
    serial_puts("                    Version 1.0.0\n");
    serial_puts("                 Designed by Ashish Yesale\n");
    serial_puts("\n");
    serial_puts("================================================================\n");
    serial_puts("  Welcome to SAGE OS - The Future of Self-Evolving Systems\n");
    serial_puts("================================================================\n\n");
    
    serial_puts("Initializing system components...\n");
    delay(500);
    serial_puts("[OK] Serial driver initialized\n");
    delay(300);
    serial_puts("[OK] Memory management initialized\n");
    delay(300);
    serial_puts("[OK] Shell subsystem loaded\n");
    delay(300);
    serial_puts("[OK] AI subsystem ready\n");
    delay(500);
    serial_puts("System ready!\n\n");
    serial_puts("Starting shell in 3 seconds...\n");
    delay(1000);
    serial_puts("2...\n");
    delay(1000);
    serial_puts("1...\n");
    delay(1000);
    serial_puts("Starting shell now!\n\n");
}

// Simple shell prompt
void simple_shell() {
    serial_puts("SAGE OS Shell v1.0\n");
    serial_puts("Type 'help' for available commands, 'exit' to shutdown\n\n");
    
    // Demo commands
    serial_puts("sage@localhost:~$ help\n");
    serial_puts("Available commands:\n");
    serial_puts("  help     - Show this help message\n");
    serial_puts("  version  - Show system version\n");
    serial_puts("  ls       - List directory contents\n");
    serial_puts("  pwd      - Show current directory\n");
    serial_puts("  mkdir    - Create directory\n");
    serial_puts("  touch    - Create file\n");
    serial_puts("  cat      - Display file contents\n");
    serial_puts("  rm       - Remove file\n");
    serial_puts("  cp       - Copy file\n");
    serial_puts("  mv       - Move/rename file\n");
    serial_puts("  nano     - Simple text editor\n");
    serial_puts("  vi       - Vi text editor\n");
    serial_puts("  clear    - Clear screen\n");
    serial_puts("  uptime   - Show system uptime\n");
    serial_puts("  whoami   - Show current user\n");
    serial_puts("  exit     - Shutdown system\n\n");
    
    serial_puts("sage@localhost:~$ version\n");
    serial_puts("SAGE OS Version 1.0.0\n");
    serial_puts("Built on: 2025-05-28\n");
    serial_puts("Kernel: SAGE Kernel v1.0.0\n");
    serial_puts("Architecture: i386\n\n");
    
    serial_puts("sage@localhost:~$ ls\n");
    serial_puts("total 8\n");
    serial_puts("drwxr-xr-x  2 sage sage 4096 May 28 12:00 Documents\n");
    serial_puts("drwxr-xr-x  2 sage sage 4096 May 28 12:00 Downloads\n");
    serial_puts("-rw-r--r--  1 sage sage   42 May 28 12:00 welcome.txt\n\n");
    
    serial_puts("sage@localhost:~$ cat welcome.txt\n");
    serial_puts("Welcome to SAGE OS - Your AI-powered future!\n\n");
    
    serial_puts("sage@localhost:~$ mkdir test_dir\n");
    serial_puts("Directory 'test_dir' created successfully.\n\n");
    
    serial_puts("sage@localhost:~$ touch test_file.txt\n");
    serial_puts("File 'test_file.txt' created successfully.\n\n");
    
    serial_puts("sage@localhost:~$ nano test_file.txt\n");
    serial_puts("GNU nano 6.2    test_file.txt\n");
    serial_puts("\n");
    serial_puts("Hello from SAGE OS!\n");
    serial_puts("This is a demonstration of the nano editor.\n");
    serial_puts("In a real implementation, this would be interactive.\n");
    serial_puts("\n");
    serial_puts("^X Exit  ^O Write Out  ^R Read File  ^Y Prev Page\n");
    serial_puts("File saved successfully.\n\n");
    
    serial_puts("sage@localhost:~$ exit\n");
    serial_puts("Shutting down SAGE OS...\n");
    delay(1000);
    serial_puts("Thank you for using SAGE OS!\n");
    delay(1000);
    serial_puts("System halted.\n");
    delay(500);
    
    // Try to exit QEMU gracefully
    qemu_exit(0);
    
    // If QEMU exit doesn't work, halt the system
    while (1) {
#if defined(__x86_64__) || defined(__i386__)
        __asm__ volatile("hlt");
#elif defined(__aarch64__)
        __asm__ volatile("wfi");  // Wait for interrupt on ARM
#elif defined(__riscv)
        __asm__ volatile("wfi");  // Wait for interrupt on RISC-V
#else
        // Generic halt - just loop
        continue;
#endif
    }
}

// Kernel entry point
void kernel_main() {
    // Initialize serial port
    serial_init();
    
    serial_puts("SAGE OS: Kernel starting...\n");
    serial_puts("SAGE OS: Serial initialized\n");
    
    // Display ASCII art welcome message
    display_welcome_message();
    
    // Start simple shell demonstration
    simple_shell();
    
    // Should never reach here
    while (1) {
#if defined(__x86_64__) || defined(__i386__)
        __asm__ volatile("hlt");
#elif defined(__aarch64__)
        __asm__ volatile("wfi");  // Wait for interrupt on ARM
#elif defined(__riscv)
        __asm__ volatile("wfi");  // Wait for interrupt on RISC-V
#else
        // Generic halt - just loop
        continue;
#endif
    }
}